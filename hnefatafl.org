* GUI
** ncurses ai for hnefatafl
** fix hnefatafl colors
* Optimize
* Engine
** TODO Write a nice turn handler function. Export all logic to respective function outside of turn runner.
** TODO loss after repeated moves
** TODO implement history (potentially limited by the number of moves within which repetition is forbidden)
** TODO surround capture
** TODO game end when king occupies corner adacent sqaure. Saves time and cpu.
** TODO improve code organization, potentially make even smaller files.
** TODO separate board storage method such that one can easily swap out backends.
** don't directly reference board storage method in
   direct access to neighboard may turn out to be more important than fast lookup as i implement
   remaining engine functions and more ai functions
** Make new king path finding function which allows to continue search on encountering 1(+) non-empty sqaure, saving which color that is.
*** This will prevent the ai thinking that a single white piece blocking king escape is a viable situation.
*** can potentially even expand with additional functions which would rate the capturability of obstructing pieces.
** reorganize turn functions?
** route functions needed for console runner, etc, through engine?
** cleanup board initialization, especially startMovesSplit (make clear it's only used on initialization)
* AI
** General
*** Board evaluation
**** Black
***** cornerGuard
****** TODO enhance cornerGuard function to prefer complete corners.
***** TODO discourage protecting adjacent to corners
***** TODO prioritize corners just behind king stoppage, perhaps at roughly same level as taking
***** TODO when cutting off king moves prioritize moving next to a friendly piece
***** TODO no points for threatening pieces that are blocking king escape
***** TODO deincentivize relying on white pieces to block king. Somehow.
***** TODO awareness of which pieces are most important for blocking king, for example by finding route to corner which is shortest and has fewest pieces in it
**** White
**** General
***** TODO don't award points for threatening a piece i want to exist
****** can potentially be solved by looking ahead.
****** can also be solved by finding piece(s) that would take the piece, and seeing what would happen if they we moved.
***** TODO functions to assess changed risk to pieces affected by the last move
****** move to avoid or protect against capture necessary to make candidates for recursive move selection
****** does the absence of this piece in its previous position put its surrounding pieces at increased risk
       basically check if the closest piece in one direction can threaten any pieces if it were to move to any
       square on the other side or the vacated square.
******* only need to analyze perpendicularly
****** does moving to the new position prevent other things from being threatened
******* only need to analyze perpendicularly
****** does it threaten new pieces?
******* only need to analyze perpendicularly
***** TODO function to assess changed risk to pieces surrounding captured piece(s)
*** TODO write a basic implementation of MCTS
*** TODO better implementation of ai: combination of monte cristo tree search with board judgements I'm making
*** Improving AI for user experience
**** Difficulty levels
***** pass in difficulty to ai
***** hardest difficulty will only select from moves tied for best score. next hardest will select from moves with the two highest rankings, etc.
**** Different Strategies
***** mechanism for randomly choosing an ai strategy
***** sometimes choose a shortsighted move (an attempt at capture that could result the AI's piece being capture next turn) randomly a certain what percentage of the time. The frequency of short-sighted moves could be a facet on which difficulty is adjusted
***** have an aggressive ai that is willing to lose a piece to take a piece.
**** move selection
***** instead of taking the first move with highest score, get all moves which share the highest score and choose a random one. So the game isn't so repetitive.
* Article
** why hnefatafl presents and interesting ai challenge
** methods tried vs those used
** high branching factor, unable to look very far into the future at the beginning of the game.
** non-recursive board judgement: function to assess current state and predict future state. less than a dozen measurement function and the game was not playing like a total idiot, but was still easy to beat.
** min-max with pruning and shallow recursion


- is moveRoom even a good heuristic? probably better served by escape moves, as most of the time this will just be the king exploring every single square on the board
  - possible new heuristic: gen all routes for king, but with a cutoff of n moves (maybe 3 or 4). note the final destination, filter only those ending in corner or adjacent. make score based on how few turns out.

- for shield wall: case statement based on position of piece: nsew, outer or one in. From there can throw to a parameterized function to check for a shield wall
 - for capture: func to get all other directions, map over those with behind-type check

- for moveroom: func to get all contiguous empty squares around king, compare those to total number.


for interface:
- direct access via coord

needed for abstracted board drawing:
- direct access via coord
- moves for each piece
- maybe create a specific datatype which is convenient for drawing


- divide heuristics into descriptive (number of pieces, defended corners, moveroom) vs predictive (piece threatened, moves to corner, etc)

- stop running top level gamestate through all game iterations for ai. it should be divded up more. top level gamestate should only be used in describing what _actually_ happens, storing setting and move history etc. get blacklosses and whitelosses out of there.

- make the mechanics rely on the minimum data: gen moves from board only, apply rules (capture, winloss) on board and Move only. That way different heuristics/algos can wrap these minimal things, augmenting or ignoring them as they wish. Don't store moves by default (controversial!)

- different ais in different modules, choose via menu

- record games, in file or db. have way to play games back

- have way to play ai against each other. either one off and watch, or in bulk.

- implement different strategies and keep them all. They can be valuable as representations of a strategy, effectiveness is another judgement.
  - pure mcts, standard augmented mcts, mcts with depth limit + board judgement, full heuristiced tree traversal looking for best within time limit regardless of depth, pure heuristic with no/minimal lookahead


- generic benchmark for each ai, in terms of how long to generate x boards or how many boards generate in x seconds




multiple AI implementations that can be selected as options
ability for them to play each other
configurable things can be supplied as args
configurable setting stored in Reader monad

make board generation and rule super minimal, taking in just the board
that way AIs can add on things like Moves storage if that's beneficial but skip it if not.
whiteLosses and blackLosses out of gamestate, gamestate only stores things like movehistory, did we win, etc.

AIs to implement:
MCTS, MCTS modified, MCTS limited to 10 turns simple heuristic, MinMax, Try pure heuristic for fun
negamax

divide heuristics into observing and predicting/lookahead

ability to record and play back games

have a standard type that is provided to the board drawer so that the drawer doesn't need to be aware of the internal. Just needs to encode piece positions and moves.

can add back in-game selection as menus in brick once that's a thing.

applyRules :: Board -> Move -> (Board, MoveResult)
